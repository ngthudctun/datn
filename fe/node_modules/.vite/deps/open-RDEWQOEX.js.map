{
  "version": 3,
  "sources": ["../../open/index.js", "../../is-wsl/index.js", "../../is-inside-container/index.js", "../../is-docker/index.js", "../../define-lazy-prop/index.js", "../../default-browser/index.js", "../../default-browser-id/index.js", "../../run-applescript/index.js", "../../bundle-name/index.js", "../../default-browser/windows.js"],
  "sourcesContent": ["import process from 'node:process';\r\nimport {Buffer} from 'node:buffer';\r\nimport path from 'node:path';\r\nimport {fileURLToPath} from 'node:url';\r\nimport childProcess from 'node:child_process';\r\nimport fs, {constants as fsConstants} from 'node:fs/promises';\r\nimport isWsl from 'is-wsl';\r\nimport defineLazyProperty from 'define-lazy-prop';\r\nimport defaultBrowser from 'default-browser';\r\nimport isInsideContainer from 'is-inside-container';\r\n\r\n// Path to included `xdg-open`.\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\r\n\r\nconst {platform, arch} = process;\r\n\r\n/**\r\nGet the mount point for fixed drives in WSL.\r\n\r\n@inner\r\n@returns {string} The mount point.\r\n*/\r\nconst getWslDrivesMountPoint = (() => {\r\n\t// Default value for \"root\" param\r\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\r\n\tconst defaultMountPoint = '/mnt/';\r\n\r\n\tlet mountPoint;\r\n\r\n\treturn async function () {\r\n\t\tif (mountPoint) {\r\n\t\t\t// Return memoized mount point value\r\n\t\t\treturn mountPoint;\r\n\t\t}\r\n\r\n\t\tconst configFilePath = '/etc/wsl.conf';\r\n\r\n\t\tlet isConfigFileExists = false;\r\n\t\ttry {\r\n\t\t\tawait fs.access(configFilePath, fsConstants.F_OK);\r\n\t\t\tisConfigFileExists = true;\r\n\t\t} catch {}\r\n\r\n\t\tif (!isConfigFileExists) {\r\n\t\t\treturn defaultMountPoint;\r\n\t\t}\r\n\r\n\t\tconst configContent = await fs.readFile(configFilePath, {encoding: 'utf8'});\r\n\t\tconst configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\r\n\r\n\t\tif (!configMountPoint) {\r\n\t\t\treturn defaultMountPoint;\r\n\t\t}\r\n\r\n\t\tmountPoint = configMountPoint.groups.mountPoint.trim();\r\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\r\n\r\n\t\treturn mountPoint;\r\n\t};\r\n})();\r\n\r\nconst pTryEach = async (array, mapper) => {\r\n\tlet latestError;\r\n\r\n\tfor (const item of array) {\r\n\t\ttry {\r\n\t\t\treturn await mapper(item); // eslint-disable-line no-await-in-loop\r\n\t\t} catch (error) {\r\n\t\t\tlatestError = error;\r\n\t\t}\r\n\t}\r\n\r\n\tthrow latestError;\r\n};\r\n\r\nconst baseOpen = async options => {\r\n\toptions = {\r\n\t\twait: false,\r\n\t\tbackground: false,\r\n\t\tnewInstance: false,\r\n\t\tallowNonzeroExitCode: false,\r\n\t\t...options,\r\n\t};\r\n\r\n\tif (Array.isArray(options.app)) {\r\n\t\treturn pTryEach(options.app, singleApp => baseOpen({\r\n\t\t\t...options,\r\n\t\t\tapp: singleApp,\r\n\t\t}));\r\n\t}\r\n\r\n\tlet {name: app, arguments: appArguments = []} = options.app ?? {};\r\n\tappArguments = [...appArguments];\r\n\r\n\tif (Array.isArray(app)) {\r\n\t\treturn pTryEach(app, appName => baseOpen({\r\n\t\t\t...options,\r\n\t\t\tapp: {\r\n\t\t\t\tname: appName,\r\n\t\t\t\targuments: appArguments,\r\n\t\t\t},\r\n\t\t}));\r\n\t}\r\n\r\n\tif (app === 'browser' || app === 'browserPrivate') {\r\n\t\t// IDs from default-browser for macOS and windows are the same\r\n\t\tconst ids = {\r\n\t\t\t'com.google.chrome': 'chrome',\r\n\t\t\t'google-chrome.desktop': 'chrome',\r\n\t\t\t'org.mozilla.firefox': 'firefox',\r\n\t\t\t'firefox.desktop': 'firefox',\r\n\t\t\t'com.microsoft.msedge': 'edge',\r\n\t\t\t'com.microsoft.edge': 'edge',\r\n\t\t\t'microsoft-edge.desktop': 'edge',\r\n\t\t};\r\n\r\n\t\t// Incognito flags for each browser in `apps`.\r\n\t\tconst flags = {\r\n\t\t\tchrome: '--incognito',\r\n\t\t\tfirefox: '--private-window',\r\n\t\t\tedge: '--inPrivate',\r\n\t\t};\r\n\r\n\t\tconst browser = await defaultBrowser();\r\n\t\tif (browser.id in ids) {\r\n\t\t\tconst browserName = ids[browser.id];\r\n\r\n\t\t\tif (app === 'browserPrivate') {\r\n\t\t\t\tappArguments.push(flags[browserName]);\r\n\t\t\t}\r\n\r\n\t\t\treturn baseOpen({\r\n\t\t\t\t...options,\r\n\t\t\t\tapp: {\r\n\t\t\t\t\tname: apps[browserName],\r\n\t\t\t\t\targuments: appArguments,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthrow new Error(`${browser.name} is not supported as a default browser`);\r\n\t}\r\n\r\n\tlet command;\r\n\tconst cliArguments = [];\r\n\tconst childProcessOptions = {};\r\n\r\n\tif (platform === 'darwin') {\r\n\t\tcommand = 'open';\r\n\r\n\t\tif (options.wait) {\r\n\t\t\tcliArguments.push('--wait-apps');\r\n\t\t}\r\n\r\n\t\tif (options.background) {\r\n\t\t\tcliArguments.push('--background');\r\n\t\t}\r\n\r\n\t\tif (options.newInstance) {\r\n\t\t\tcliArguments.push('--new');\r\n\t\t}\r\n\r\n\t\tif (app) {\r\n\t\t\tcliArguments.push('-a', app);\r\n\t\t}\r\n\t} else if (platform === 'win32' || (isWsl && !isInsideContainer() && !app)) {\r\n\t\tconst mountPoint = await getWslDrivesMountPoint();\r\n\r\n\t\tcommand = isWsl\r\n\t\t\t? `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe`\r\n\t\t\t: `${process.env.SYSTEMROOT || process.env.windir || 'C:\\\\Windows'}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\r\n\r\n\t\tcliArguments.push(\r\n\t\t\t'-NoProfile',\r\n\t\t\t'-NonInteractive',\r\n\t\t\t'-ExecutionPolicy',\r\n\t\t\t'Bypass',\r\n\t\t\t'-EncodedCommand',\r\n\t\t);\r\n\r\n\t\tif (!isWsl) {\r\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\r\n\t\t}\r\n\r\n\t\tconst encodedArguments = ['Start'];\r\n\r\n\t\tif (options.wait) {\r\n\t\t\tencodedArguments.push('-Wait');\r\n\t\t}\r\n\r\n\t\tif (app) {\r\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\r\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\r\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`);\r\n\t\t\tif (options.target) {\r\n\t\t\t\tappArguments.push(options.target);\r\n\t\t\t}\r\n\t\t} else if (options.target) {\r\n\t\t\tencodedArguments.push(`\"${options.target}\"`);\r\n\t\t}\r\n\r\n\t\tif (appArguments.length > 0) {\r\n\t\t\tappArguments = appArguments.map(argument => `\"\\`\"${argument}\\`\"\"`);\r\n\t\t\tencodedArguments.push('-ArgumentList', appArguments.join(','));\r\n\t\t}\r\n\r\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\r\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\r\n\t} else {\r\n\t\tif (app) {\r\n\t\t\tcommand = app;\r\n\t\t} else {\r\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\r\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\r\n\r\n\t\t\t// Check if local `xdg-open` exists and is executable.\r\n\t\t\tlet exeLocalXdgOpen = false;\r\n\t\t\ttry {\r\n\t\t\t\tawait fs.access(localXdgOpenPath, fsConstants.X_OK);\r\n\t\t\t\texeLocalXdgOpen = true;\r\n\t\t\t} catch {}\r\n\r\n\t\t\tconst useSystemXdgOpen = process.versions.electron\r\n\t\t\t\t?? (platform === 'android' || isBundled || !exeLocalXdgOpen);\r\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\r\n\t\t}\r\n\r\n\t\tif (appArguments.length > 0) {\r\n\t\t\tcliArguments.push(...appArguments);\r\n\t\t}\r\n\r\n\t\tif (!options.wait) {\r\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\r\n\t\t\t// and it's detached from the parent even if it's unref'd.\r\n\t\t\tchildProcessOptions.stdio = 'ignore';\r\n\t\t\tchildProcessOptions.detached = true;\r\n\t\t}\r\n\t}\r\n\r\n\tif (platform === 'darwin' && appArguments.length > 0) {\r\n\t\tcliArguments.push('--args', ...appArguments);\r\n\t}\r\n\r\n\t// This has to come after `--args`.\r\n\tif (options.target) {\r\n\t\tcliArguments.push(options.target);\r\n\t}\r\n\r\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\r\n\r\n\tif (options.wait) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tsubprocess.once('error', reject);\r\n\r\n\t\t\tsubprocess.once('close', exitCode => {\r\n\t\t\t\tif (!options.allowNonzeroExitCode && exitCode > 0) {\r\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresolve(subprocess);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tsubprocess.unref();\r\n\r\n\treturn subprocess;\r\n};\r\n\r\nconst open = (target, options) => {\r\n\tif (typeof target !== 'string') {\r\n\t\tthrow new TypeError('Expected a `target`');\r\n\t}\r\n\r\n\treturn baseOpen({\r\n\t\t...options,\r\n\t\ttarget,\r\n\t});\r\n};\r\n\r\nexport const openApp = (name, options) => {\r\n\tif (typeof name !== 'string' && !Array.isArray(name)) {\r\n\t\tthrow new TypeError('Expected a valid `name`');\r\n\t}\r\n\r\n\tconst {arguments: appArguments = []} = options ?? {};\r\n\tif (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\r\n\t\tthrow new TypeError('Expected `appArguments` as Array type');\r\n\t}\r\n\r\n\treturn baseOpen({\r\n\t\t...options,\r\n\t\tapp: {\r\n\t\t\tname,\r\n\t\t\targuments: appArguments,\r\n\t\t},\r\n\t});\r\n};\r\n\r\nfunction detectArchBinary(binary) {\r\n\tif (typeof binary === 'string' || Array.isArray(binary)) {\r\n\t\treturn binary;\r\n\t}\r\n\r\n\tconst {[arch]: archBinary} = binary;\r\n\r\n\tif (!archBinary) {\r\n\t\tthrow new Error(`${arch} is not supported`);\r\n\t}\r\n\r\n\treturn archBinary;\r\n}\r\n\r\nfunction detectPlatformBinary({[platform]: platformBinary}, {wsl}) {\r\n\tif (wsl && isWsl) {\r\n\t\treturn detectArchBinary(wsl);\r\n\t}\r\n\r\n\tif (!platformBinary) {\r\n\t\tthrow new Error(`${platform} is not supported`);\r\n\t}\r\n\r\n\treturn detectArchBinary(platformBinary);\r\n}\r\n\r\nexport const apps = {};\r\n\r\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\r\n\tdarwin: 'google chrome',\r\n\twin32: 'chrome',\r\n\tlinux: ['google-chrome', 'google-chrome-stable', 'chromium'],\r\n}, {\r\n\twsl: {\r\n\t\tia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\r\n\t\tx64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe'],\r\n\t},\r\n}));\r\n\r\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\r\n\tdarwin: 'firefox',\r\n\twin32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\r\n\tlinux: 'firefox',\r\n}, {\r\n\twsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe',\r\n}));\r\n\r\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\r\n\tdarwin: 'microsoft edge',\r\n\twin32: 'msedge',\r\n\tlinux: ['microsoft-edge', 'microsoft-edge-dev'],\r\n}, {\r\n\twsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe',\r\n}));\r\n\r\ndefineLazyProperty(apps, 'browser', () => 'browser');\r\n\r\ndefineLazyProperty(apps, 'browserPrivate', () => 'browserPrivate');\r\n\r\nexport default open;\r\n", "import process from 'node:process';\r\nimport os from 'node:os';\r\nimport fs from 'node:fs';\r\nimport isInsideContainer from 'is-inside-container';\r\n\r\nconst isWsl = () => {\r\n\tif (process.platform !== 'linux') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (os.release().toLowerCase().includes('microsoft')) {\r\n\t\tif (isInsideContainer()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\ttry {\r\n\t\treturn fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft')\r\n\t\t\t? !isInsideContainer() : false;\r\n\t} catch {\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\nexport default process.env.__IS_WSL_TEST__ ? isWsl : isWsl();\r\n", "import fs from 'node:fs';\r\nimport isDocker from 'is-docker';\r\n\r\nlet cachedResult;\r\n\r\n// Podman detection\r\nconst hasContainerEnv = () => {\r\n\ttry {\r\n\t\tfs.statSync('/run/.containerenv');\r\n\t\treturn true;\r\n\t} catch {\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\nexport default function isInsideContainer() {\r\n\t// TODO: Use `??=` when targeting Node.js 16.\r\n\tif (cachedResult === undefined) {\r\n\t\tcachedResult = hasContainerEnv() || isDocker();\r\n\t}\r\n\r\n\treturn cachedResult;\r\n}\r\n", "import fs from 'node:fs';\r\n\r\nlet isDockerCached;\r\n\r\nfunction hasDockerEnv() {\r\n\ttry {\r\n\t\tfs.statSync('/.dockerenv');\r\n\t\treturn true;\r\n\t} catch {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nfunction hasDockerCGroup() {\r\n\ttry {\r\n\t\treturn fs.readFileSync('/proc/self/cgroup', 'utf8').includes('docker');\r\n\t} catch {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport default function isDocker() {\r\n\t// TODO: Use `??=` when targeting Node.js 16.\r\n\tif (isDockerCached === undefined) {\r\n\t\tisDockerCached = hasDockerEnv() || hasDockerCGroup();\r\n\t}\r\n\r\n\treturn isDockerCached;\r\n}\r\n", "export default function defineLazyProperty(object, propertyName, valueGetter) {\r\n\tconst define = value => Object.defineProperty(object, propertyName, {value, enumerable: true, writable: true});\r\n\r\n\tObject.defineProperty(object, propertyName, {\r\n\t\tconfigurable: true,\r\n\t\tenumerable: true,\r\n\t\tget() {\r\n\t\t\tconst result = valueGetter();\r\n\t\t\tdefine(result);\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\tset(value) {\r\n\t\t\tdefine(value);\r\n\t\t}\r\n\t});\r\n\r\n\treturn object;\r\n}\r\n", "import {promisify} from 'node:util';\r\nimport process from 'node:process';\r\nimport {execFile} from 'node:child_process';\r\nimport defaultBrowserId from 'default-browser-id';\r\nimport bundleName from 'bundle-name';\r\nimport windows from './windows.js';\r\n\r\nconst execFileAsync = promisify(execFile);\r\n\r\n// Inlined: https://github.com/sindresorhus/titleize/blob/main/index.js\r\nconst titleize = string => string.toLowerCase().replaceAll(/(?:^|\\s|-)\\S/g, x => x.toUpperCase());\r\n\r\nexport default async function defaultBrowser() {\r\n\tif (process.platform === 'darwin') {\r\n\t\tconst id = await defaultBrowserId();\r\n\t\tconst name = await bundleName(id);\r\n\t\treturn {name, id};\r\n\t}\r\n\r\n\tif (process.platform === 'linux') {\r\n\t\tconst {stdout} = await execFileAsync('xdg-mime', ['query', 'default', 'x-scheme-handler/http']);\r\n\t\tconst id = stdout.trim();\r\n\t\tconst name = titleize(id.replace(/.desktop$/, '').replace('-', ' '));\r\n\t\treturn {name, id};\r\n\t}\r\n\r\n\tif (process.platform === 'win32') {\r\n\t\treturn windows();\r\n\t}\r\n\r\n\tthrow new Error('Only macOS, Linux, and Windows are supported');\r\n}\r\n", "import {promisify} from 'node:util';\r\nimport process from 'node:process';\r\nimport {execFile} from 'node:child_process';\r\n\r\nconst execFileAsync = promisify(execFile);\r\n\r\nexport default async function defaultBrowserId() {\r\n\tif (process.platform !== 'darwin') {\r\n\t\tthrow new Error('macOS only');\r\n\t}\r\n\r\n\tconst {stdout} = await execFileAsync('defaults', ['read', 'com.apple.LaunchServices/com.apple.launchservices.secure', 'LSHandlers']);\r\n\r\n\t// `(?!-)` is to prevent matching `LSHandlerRoleAll = \"-\";`.\r\n\tconst match = /LSHandlerRoleAll = \"(?!-)(?<id>[^\"]+?)\";\\s+?LSHandlerURLScheme = (?:http|https);/.exec(stdout);\r\n\r\n\treturn match?.groups.id ?? 'com.apple.Safari';\r\n}\r\n", "import process from 'node:process';\r\nimport {promisify} from 'node:util';\r\nimport {execFile, execFileSync} from 'node:child_process';\r\n\r\nconst execFileAsync = promisify(execFile);\r\n\r\nexport async function runAppleScript(script, {humanReadableOutput = true} = {}) {\r\n\tif (process.platform !== 'darwin') {\r\n\t\tthrow new Error('macOS only');\r\n\t}\r\n\r\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\r\n\r\n\tconst {stdout} = await execFileAsync('osascript', ['-e', script, outputArguments]);\r\n\treturn stdout.trim();\r\n}\r\n\r\nexport function runAppleScriptSync(script, {humanReadableOutput = true} = {}) {\r\n\tif (process.platform !== 'darwin') {\r\n\t\tthrow new Error('macOS only');\r\n\t}\r\n\r\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\r\n\r\n\tconst stdout = execFileSync('osascript', ['-e', script, ...outputArguments], {\r\n\t\tencoding: 'utf8',\r\n\t\tstdio: ['ignore', 'pipe', 'ignore'],\r\n\t\ttimeout: 500,\r\n\t});\r\n\r\n\treturn stdout.trim();\r\n}\r\n", "import {runAppleScript} from 'run-applescript';\r\n\r\nexport default async function bundleName(bundleId) {\r\n\treturn runAppleScript(`tell application \"Finder\" to set app_path to application file id \"${bundleId}\" as string\\ntell application \"System Events\" to get value of property list item \"CFBundleName\" of property list file (app_path & \":Contents:Info.plist\")`);\r\n}\r\n", "import {promisify} from 'node:util';\r\nimport {execFile} from 'node:child_process';\r\n\r\nconst execFileAsync = promisify(execFile);\r\n\r\n// Windows doesn't have browser IDs in the same way macOS/Linux does so we give fake\r\n// ones that look real and match the macOS/Linux versions for cross-platform apps.\r\nconst windowsBrowserProgIds = {\r\n\tAppXq0fevzme2pys62n3e0fbqa7peapykr8v: {name: 'Edge', id: 'com.microsoft.edge.old'},\r\n\tMSEdgeDHTML: {name: 'Edge', id: 'com.microsoft.edge'}, // On macOS, it's \"com.microsoft.edgemac\"\r\n\tMSEdgeHTM: {name: 'Edge', id: 'com.microsoft.edge'}, // Newer Edge/Win10 releases\r\n\t'IE.HTTP': {name: 'Internet Explorer', id: 'com.microsoft.ie'},\r\n\tFirefoxURL: {name: 'Firefox', id: 'org.mozilla.firefox'},\r\n\tChromeHTML: {name: 'Chrome', id: 'com.google.chrome'},\r\n\tBraveHTML: {name: 'Brave', id: 'com.brave.Browser'},\r\n\tBraveBHTML: {name: 'Brave Beta', id: 'com.brave.Browser.beta'},\r\n\tBraveSSHTM: {name: 'Brave Nightly', id: 'com.brave.Browser.nightly'},\r\n};\r\n\r\nexport class UnknownBrowserError extends Error {}\r\n\r\nexport default async function defaultBrowser(_execFileAsync = execFileAsync) {\r\n\tconst {stdout} = await _execFileAsync('reg', [\r\n\t\t'QUERY',\r\n\t\t' HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\Shell\\\\Associations\\\\UrlAssociations\\\\http\\\\UserChoice',\r\n\t\t'/v',\r\n\t\t'ProgId',\r\n\t]);\r\n\r\n\tconst match = /ProgId\\s*REG_SZ\\s*(?<id>\\S+)/.exec(stdout);\r\n\tif (!match) {\r\n\t\tthrow new UnknownBrowserError(`Cannot find Windows browser in stdout: ${JSON.stringify(stdout)}`);\r\n\t}\r\n\r\n\tconst {id} = match.groups;\r\n\r\n\tconst browser = windowsBrowserProgIds[id];\r\n\tif (!browser) {\r\n\t\tthrow new UnknownBrowserError(`Unknown browser ID: ${id}`);\r\n\t}\r\n\r\n\treturn browser;\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_node_process", "import_node_child_process", "import_node_fs", "import_node_fs", "fs", "fs", "process", "os", "fs", "import_node_util", "import_node_process", "import_node_child_process", "import_node_process", "process", "import_node_process", "import_node_util", "import_node_child_process", "execFileAsync", "process", "import_node_util", "import_node_child_process", "execFileAsync", "execFileAsync", "defaultBrowser", "process", "path", "process", "fs", "fsConstants", "defaultBrowser", "childProcess"]
}
